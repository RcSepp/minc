import paws;
import paws.assert;
import paws.exception;
import paws.subroutine;
import paws.time;

PawsVoid test_paws()
{
	// Test expression `getFileScope()` and expression `test($E<PawsBase>)`
	assert(type(getFileScope()) == PawsStaticBlockExpr);

	// Test symbol `FILE_SCOPE_TYPE`
	assert(type(FILE_SCOPE_TYPE) == PawsScopeType);

	// Test statement `$E<PawsBase>`, expression `$I` and expression `$I<PawsBase> = $E<PawsBase>`
	a = 1;
	assert(a == 1);

	// Test statement `$B`
	b = 0;
	{
		b = 1;
	}
	assert(b == 1);

	// Test expression `($E)`
	c = (1);
	assert(c);

	// Test expression `$L`
	assert("1" == "1");

	// Test symbol lookup exception
	assert(d = e + 1) throws PawsException("`e` was not declared in this scope");

	// Test statement `if($E<PawsInt>) $S`
	if (1) assert(1);

	// Test statement `if($E<PawsInt>) $S else $S`
	if (1) assert(1); else assert(0);
	if (0) assert(0); else assert(1);

	// Test expression `$E<PawsInt> ? $E : $E`
	assert(0 ? 0 : 1);
	assert(1 ? 1 : 0);
	assert(1 ? 1 : '0') throws PawsException("operands to ?: have different types <PawsInt> and <PawsString>");

	// Test statement `while($E<PawsInt>) $S`
	i = 0;
	while (i != 2) i = i + 1;
	assert(i == 2);

	// Test statement `for($E; $E; $E) $B`
	k = 0;
	for (j = 0; j != 3; j = j + 1) { k = k + j + 1; }
	assert(k == 6);
	k = 0;
	for (j = 0.1; 3.5 - j; j = j + 1.0) { k = k + j + 1; } // Test inherent for condition type cast to PawsInt
	assert(k == 6);
	assert { for (j = 0; '0'; j = j + 1) {} } throws PawsException("invalid for condition type: '0'<PawsString>, expected: <PawsInt>");

	// Test NULL
	assert(str(NULL) == "NULL");
	assert(type(NULL) == PawsNull);
	assert(type(PawsNull) == PawsType);
	assert(sizeof(NULL) == 0);
	null = NULL;
	assert(null == NULL);

	// Test expression `str($E<PawsBase>)`
	assert(str(123) == "123");

	// Test type equivalence
	assert(PawsInt == PawsInt);
	assert(PawsInt != PawsBase);
	assert(isInstance(PawsInt, PawsBase));

	// Test type assignment
	l = PawsExpr;
	// assert(PawsExpr == l); //TODO: Assertion failes
	l = PawsBlockExpr;
	assert(PawsBlockExpr == l);

	// Test builtin functions
	assert(type(PawsInt) == PawsType);
	assert(sizeof(PawsType) == 64);
}

PawsVoid test_paws_int()
{
	import paws.int;

	// Test equivalence
	assert(1 == 1);
	assert(!(1 == 2));
	assert(1 != 2);
	assert(!(1 == 2));
	assert(2 >> 1);
	assert(!(1 >> 2));
	assert(1 << 2);
	assert(!(2 << 1));
	assert(1 >= 1);
	assert(2 >= 1);
	assert(!(1 >= 2));
	assert(1 <= 1);
	assert(1 <= 2);
	assert(!(2 <= 1));

	// Test logical operators
	assert(0 == !1);
	assert(1 == !!1);
	assert(!(0 && 0));
	assert(!(0 && 1));
	assert(!(1 && 0));
	assert(  1 && 1);
	assert(!(0 || 0));
	assert(  0 || 1);
	assert(  1 || 0);
	assert(  1 || 1);

	// Test unary operators
	a = -1;
	assert(++a == 0);
	assert(a++ == 0);
	assert(a == 1);
	assert(--a == 0);
	assert(a-- == 0);
	assert(a == -1);

	// Test binary operators
	a = 7;
	b = -3;
	assert(-a + -b == -4);
	assert(a - b == 10);
	assert(a * b == -21);
	assert(a / b == -2);
	assert(a / 0) throws PawsException("Divide by zero exception");
	assert(min(a, b) == -3);
	assert(max(a, b) == 7);

	// Test in-place operators
	a = 1;
	assert((a += 6) == 7);
	assert((a -= 5) == 2);
	assert((a *= 4) == 8);
	assert((a /= 3) == 2);

	// Test builtin functions
	assert(str(-4) == "-4");
	assert(type(-4) == PawsInt);
	assert(sizeof(-4) == 4);
}

PawsVoid test_paws_double()
{
	import paws.double;

	// Test equivalence
	assert(1.0 == 1.0);
	assert(!(1.0 == 2.0));
	assert(1.0 != 2.0);
	assert(!(1.0 == 2.0));
	assert(2.0 >> 1.0);
	assert(!(1.0 >> 2.0));
	assert(1.0 << 2.0);
	assert(!(2.0 << 1.0));
	assert(1.0 >= 1.0);
	assert(2.0 >= 1.0);
	assert(!(1.0 >= 2.0));
	assert(1.0 <= 1.0);
	assert(1.0 <= 2.0);
	assert(!(2.0 <= 1.0));

	// Test logical operators
	assert(0 == !1.0);
	assert(1.0 == !!1.0);
	assert(!(0 && 0.0));
	assert(!(0 && 1.0));
	assert(!(1.0 && 0.0));
	assert(  1.0 && 1.0);
	assert(!(0 || 0.0));
	assert(  0.0 || 1.0);
	assert(  1.0 || 0.0);
	assert(  1.0 || 1.0);

	// Test unary operators
	a = -1.0;
	assert(++a == 0.0);
	assert(a++ == 0.0);
	assert(a == 1.0);
	assert(--a == 0.0);
	assert(a-- == 0.0);
	assert(a == -1.0);

	// Test binary operators
	a = 7.0;
	b = -3.0;
	assert(-a + -b == -4.0);
	assert(a - b == 10.0);
	assert(a * b == -21.0);
	assert(a / b << -2.3 && a / b >> -2.4);
	assert(a / 0.0) throws PawsException("Divide by zero exception");
	assert(min(a, b) == -3.0);
	assert(max(a, b) == 7.0);

	// Test in-place operators
	a = 1.0;
	assert((a += 6.0) == 7.0);
	assert((a -= 5.0) == 2.0);
	assert((a *= 4.0) == 8.0);
	assert((a /= 2.0) == 4.0);

	// Test builtin functions
	assert(str(-4.0) == "-4.000000");
	assert(type(-4.0) == PawsDouble);
	assert(sizeof(-4.0) == 8);
}

PawsVoid test_paws_string()
{
	import paws.string;

	// Test logical operators
	assert("hat" == "hat");
	assert("hat" != "had");

	// Test binary operators
	a = "foo";
	assert("foobar" == (a += "bar"));
	assert(a == "foobar");
	assert("foo" + "bar" == "foobar");
	assert("la" * 3 == "lalala");
	assert(3 * "la" == "lalala");

	// Test builtin functions
	assert("foo".length == 3);
	assert("spam".substr(2) == "am");
	assert("spam".substr(1, 2) == "pa");
	assert("foo".find("o") == 1);
	assert("foo".rfind("o") == 2);
	assert(str("foo") == "foo");
	assert(type("foo") == PawsString);

	// '==' operator tests by-value
	a = "chateau".substr(1, 3);
	b = "ha" + "t";
	assert(a == b);

	// Test string map
	m = map("apple": "red", "banana": "yellow");
	assert(m["banana"] == "yellow");
	assert(m.contains("apple"));
	assert(!m.contains("orange"));
	assert(str(m) == "{ apple: red, banana: yellow }");
	s = "";
	for (fruit, color: m)
	{
		s += fruit + "s are " + color + ", ";
	}
	assert(s == "apples are red, bananas are yellow, ");
}

PawsVoid test_paws_exceptions()
{
	// Test try/catch PawsException
	i = 0;
	try
	{
		++i;
		*1;
		assert(0);
	}
	catch (PawsException err)
	{
		assert(err.msg == "undefined expression *1;");
		assert(++i / 0) throws PawsException("Divide by zero exception");
	}
	try 1*; catch i++;
	assert(i == 3);

	// Test nested try/catch PawsException
	i = 0;
	try
	{
		try
		{
			++i / 0;
			assert(0);
		}
		catch (PawsException err)
		{
			assert(err.msg == "Divide by zero exception");
			++i / 0;
			assert(0);
		}
	}
	catch (PawsException err)
	{
		++i;
		assert(err.msg == "Divide by zero exception");
		assert(1 / 0) throws PawsException("Divide by zero exception");
	}
	assert(i == 3);

	// Test try/catch PawsException
	try
		throw PawsException();
	catch (PawsException err)
	{
		assert(err.msg == "");
	}
	try
		throw PawsException("foo");
	catch (PawsException err)
	{
		assert(err.msg == "foo");
	}

	// Test try/catch PawsInt
	try
		throw 1;
	catch (PawsInt err)
	{
		assert(err == 1);
	}
	i = 0;
	try throw 1; catch i++;
	assert(i == 1);

	// Test try/catch wrong type
	i = 0;
	try
	{
		try
			throw 0 + ++i; //TODO: throw ++i throws "undefined statement"
		catch (PawsInt err)
		{
			assert(err == i++);
		}
	}
	catch (PawsInt err)
	{
		assert(0);
	}
	try
	{
		try
			throw PawsException();
		catch (PawsInt err)
		{
			assert(0);
		}
	}
	catch (PawsException err)
	{
		++i;
		assert(err.msg == "");
	}
	try
	{
		try
			throw str(++i);
		catch (PawsInt err)
		{
			assert(0);
		}
	}
	catch (PawsString err)
	{
		assert(err == str(i++));
	}
	assert(i == 5);

	// Test try/catch from within function
	PawsVoid f() { throw 2; }
	try
		f();
	catch (PawsInt err)
	{
		assert(err == 2);
	}
}

PawsVoid test_paws_array()
{
	import paws.array;

	// Test Inline array declaration
	a = [1, 2];
	assert(str(a) == "[1, 2]");
	b = [];
	assert(str(b) == "[]");

	// Test array getter
	assert(a[1] == 2);
	assert(b[0]) throws PawsException("index 0 out of bounds for array of length 0");

	// Test array setter
	a[1] = 2;
	assert(a[1] == 2);
	a[1] = 3.9;
	assert(a[1] == 3);
	assert(a[1] = '4') throws PawsException("invalid conversion of '4' from <PawsString> to <PawsInt>");
	assert(b[0] = 5) throws PawsException("cannot assign to empty array");

	// Test builtin functions
	assert(str(a) == "[1, 3]");
	assert(isInstance(type(a), PawsArray));
	assert(isInstance(type(a), PawsInt[]));
	assert(sizeof([]) == 24);
	assert(sizeof([1, 2, 3]) == 24);

	// Test array iteration
	sum = 0;
	for (c: a) { sum += c; }
	assert(sum == 4);
	for (c: b) { assert(0); }
}

PawsVoid test_paws_subroutine()
{
	import paws.subroutine;

	// Test return from void function
	PawsVoid f()
	{
		assert { return '1'; } throws PawsException("void function should not return a value");
		return;
		assert(0); // Should never be hit
	}
	f();
	assert(type(f()) == PawsVoid);
	assert(str(f) == "f()");
	assert(sizeof(f()) == 0);
	assert(sizeof(f) == 8);

	// Test return from non-void function
	PawsInt f()
	{
		assert { return '1'; } throws PawsException("invalid return type `PawsString`");
		assert { return; } throws PawsException("non-void function should return a value");
		return 1;
	}
	assert(f() == 1);

	// Test void function without return
	PawsVoid f() {}
	f();

	// Test non-void function without return
	PawsInt f() {}
	assert(f()) throws PawsException("non-void function should return a value");

	// Test return from try block
	// Internally `return ...` is handled by raising a ReturnException. Make sure try/catch does not catch the ReturnException
	PawsInt f()
	{
		try
			return 2;
		catch
		{
			assert(0);
		}
	}
	assert(f() == 2);

	// Test function arguments
	PawsInt f(PawsInt a, PawsInt b) { return a - b; }
	assert(f(1)) throws PawsException("invalid number of function arguments");
	assert(f(1, 2) == -1);
	assert(f(1, 2, 3)) throws PawsException("invalid number of function arguments");
	assert(f(1, '2')) throws PawsException("invalid function argument type: '2'<PawsString>, expected: <PawsInt>");
	assert(f(1.1, 2.9) == -1);
	assert(str(f) == "f(PawsInt, PawsInt)");

	// Test non-function call
	g = 1;
	assert(g()) throws PawsException("`g` cannot be used as a function");
	assert(h()) throws PawsException("`h` was not declared in this scope");
	assert(1()) throws PawsException("expression cannot be used as a function");

	// Test recursive function
	PawsInt f(PawsInt i)
	{
		if (++i <= 4)
			i -= 3 * f(i);
		return i;
	}
	assert(f(1) == -106);
	assert(str(f) == "f(PawsInt)");

	// Test callback function
	PawsInt f(PawsInt a, PawsInt b) { return a + b; }
	PawsInt g(PawsFunction<PawsInt> a, PawsInt b) { return a(1, 2) + b; }
	assert(str(g) == "g(PawsFunction<PawsInt>, PawsInt)");
	assert(g(f, 3) == 6);
}

PawsVoid test_paws_struct()
{
	import paws.struct;

	x = 5;
	struct S
	{
		a = 1;
		PawsInt b(PawsInt a, PawsInt b) { return a - b; }
		c = "foo";
		PawsInt d()
		{
			{} // Test non struct specific statements within a method
			return this.a;
		}
		PawsInt e()
		{
			x = 3; // Make sure struct definition statements aren't inherited into method scope
			return a;
		}
		S f(S a) {return a; }
		g = x + a;
		PawsInt h() { return e() + this.d(); }
	}
	s = S();

	// Test struct equivalence
	assert(s == s);
	assert(s != S());

	// Test struct member getter/setter
	assert(s.a == 1);
	s.a = 2;
	assert(s.a == 2);
	s.a = 3.9;
	assert(s.a == 3);
	assert(s.c == "foo");
	assert(s.a = '4') throws PawsException("cannot assign value of type <PawsString> to variable of type <PawsInt>");
	assert(s.x = 5) throws PawsException("no member named 'x' in 'S'");
	assert(s.x) throws PawsException("no member named 'x' in 'S'");
	assert(s.g == 6);

	// Test struct method call
	assert(s.b(1)) throws PawsException("invalid number of method arguments");
	assert(s.b(1, 2) == -1);
	assert(s.b(1, 2, 3)) throws PawsException("invalid number of method arguments");
	assert(s.b(1, '2')) throws PawsException("invalid method argument type: '2'<PawsString>, expected: <PawsInt>");
	assert(s.b(1.1, 2.9) == -1);
	assert(s.d() == 3);
	assert(s.e() == 3);
	assert(s.f(s) == s);
	assert(s.h() == 6);
	assert(s.x()) throws PawsException("no method named 'x' in 'S'");

	// Test struct cast to string
	assert(str(s) == 'S { a=3, c="foo", g=6 }');
	struct S {}
	assert(str(S()) == "S {}");

	// Test invalid struct definition
	assert { struct S { print("illegal print statement"); } } throws PawsException("Invalid command in struct context");

	// Test non-struct member access
	z = '';
	assert(z.a) throws PawsException("cannot access member of non-struct type <PawsString>");
	assert(z.a = 0) throws PawsException("cannot access member of non-struct type <PawsString>");
	assert(z.b()) throws PawsException("cannot access member of non-struct type <PawsString>");

	// Test struct constructor
	struct S
	{
		a = 0;
		S() { this.a = 1; }
	}
	assert(S().a == 1);
	assert(S(0)) throws PawsException("no matching constructor for call S(PawsInt)");
	struct S
	{
		a = 0;
		S(PawsInt a) { this.a = a; }
		S(PawsString a) { this.a = a.length; }
		S(PawsInt a, PawsInt b) { this.a = a + b; }
	}
	assert(S(2).a == 2);
	assert(S("foo").a == 3);
	assert(S(2, 2).a == 4);
	assert(S(5.5).a == 5);
	assert(S()) throws PawsException("no matching constructor for call S()");
	assert(S('0', S())) throws PawsException("no matching constructor for call S(PawsString, S)");
	assert(S(spam)) throws PawsException("`spam` was not declared in this scope");
	assert { struct S { T() {} } } throws PawsException("cannot declare non-constructor method T() without a return type");
	assert { struct S { T(PawsString a, S b) {} } } throws PawsException("cannot declare non-constructor method T(PawsString, S) without a return type");
	assert { struct S { T(spam a) {} } } throws PawsException("`spam` was not declared in this scope");

	// Test NULL struct
	struct S
	{
		a = 0;
		PawsVoid b() {}
	}
	PawsVoid func(S s)
	{
		assert(s.a) throws PawsException("trying to access member a of NULL");
		assert(s.a = 1) throws PawsException("trying to access member a of NULL");
		assert(s.b()) throws PawsException("trying to access method b of NULL");
	}
	func(NULL);

	// Test invalid struct
	assert { struct S { a = 0; a = 1; } } throws PawsException("redeclaration of S::a");
	assert { struct S { PawsVoid a() {} a = 1; } } throws PawsException("redeclaration of S::a");
	assert { struct S { PawsVoid a() {} PawsVoid a() {} } } throws PawsException("redeclaration of S::a");
	assert { struct S { PawsVoid a() {} a = 1; } } throws PawsException("redeclaration of S::a");

	// Test struct size
	struct S
	{
		a = 0;
		b = 0;
		PawsInt ma() { return a; }
		PawsInt mb() { return b; }
		S() {}
	}
	assert(sizeof(S) == 200);
	assert(sizeof(S()) == 8);

	// Test inheritance
	struct T: S
	{
		//b = 1; //TODO: Implement overwriting inherited members
		c = 2;
		PawsInt mb() { return b + 10; }
		PawsInt mc() { return c + 10; }
	}
	t = T();
	PawsVoid func(S s)
	{
		assert(s.a == 0);
		assert(s.b == 0); //TODO: Implement overwriting inherited members
		assert(s.c) throws PawsException("no member named 'c' in 'S'");
		assert(s.ma() == 0);
		assert(s.mb() == 0); //TODO: Implement overwriting inherited members
		assert(s.mc()) throws PawsException("no method named 'mc' in 'S'");
	}
	func(t);
	PawsVoid func(T s)
	{
		assert(s.a == 0);
		assert(s.b == 0); //TODO: Implement overwriting inherited members
		assert(s.c == 2);
		assert(s.ma() == 0);
		assert(s.mb() == 10); //TODO: Implement overwriting inherited members
		assert(s.mc() == 12);
	}
	func(t);

	// Test forward declaration
	struct F;
	PawsVoid func(F f) {}
	struct F {}
	func(F());
}

PawsVoid test_paws_frames()
{
	import paws.frame;

	// Test return from void frame
	PawsVoid frame f()
	{
		assert { return '1'; } throws PawsException("void frame should not return a value");
		return;
		assert(0); // Should never be hit
	}
	await f();
	assert(type(await f()) == PawsVoid);

	// Test return from non-void frame
	PawsInt frame f()
	{
		public a = 1;
		assert { return '1'; } throws PawsException("invalid return type `PawsString`");
		assert { return; } throws PawsException("non-void frame should return a value");
		return a;
	}
	fi = f();
	assert(fi.a == 1);
	assert(fi.b) throws PawsException("no member named 'b' in 'f'");
	assert(await fi == 1);

	// Test void frame without return
	PawsVoid frame f() {}
	await f();

	// Test non-void frame without return
	PawsInt frame f() {}
	assert(await f()) throws PawsException("missing return statement in frame body");

	// Test frame arguments
	PawsInt frame f(PawsInt a, PawsInt b) { return a - b; }
	assert(await f(1)) throws PawsException("invalid number of frame arguments");
	assert(await f(1, 2) == -1);
	assert(await f(1, 2, 3)) throws PawsException("invalid number of frame arguments");
	assert(await f(1, '2')) throws PawsException("invalid frame argument type: '2'<PawsString>, expected: <PawsInt>");
	assert(await f(1.1, 2.9) == -1);

	// Test non-frame call
	g = 1;
	assert(await g) throws PawsException("`g` is not awaitable");
	assert(await h) throws PawsException("`h` was not declared in this scope");
	assert(await h()) throws PawsException("`h` was not declared in this scope");
	assert(await 1) throws PawsException("expression is not awaitable");

	// Test await from try block
	// Internally `await ...` is handled by raising an AwaitException. Make sure try/catch does not catch the AwaitException
	//
	// This also tests nested resuming:
	// When the frame block is resumed after sleep(0), the nested try block should also be resumed.
	// Failed nested resuming will result in the following infinite loop:
	//
	// start f() {} -> -/-> (re)start try {} -> suspend sleep(0) -> resume f() {} -\
	//					\__________________________________________________________/
	i = 0;
	PawsInt frame f()
	{
		try
		{
			++i;
			await sleep(0);
			return i;
		}
		catch
		{
			assert(0);
		}
	}
	assert(await f() == 1);

	// Test composit await
	PawsInt frame A()
	{
		i = 1;
		return i;
	}
	PawsInt frame B()
	{
		a = A();
		b = A();
		c = A();
		return await a + await c + await b;
	}
	assert(await B() == 3);

	// Test event
	e = event<PawsInt>();
	e(1);
	e(2.5);
	assert(await e == 1);
	assert(await e == 2);
	assert(type(e) == event<PawsInt>);
	assert(sizeof(event<PawsInt>) == 64);
	assert(sizeof(e) == 72);

	// Test frame size
	PawsVoid frame A()
	{
		public a = 0;
		public b = 0;
		public c = 0;
	}
	assert(sizeof(A) == 184);
	assert(sizeof(A()) == 12);
}

PawsVoid test_paws_time()
{
	import paws.time;

	measure t sleep(0);
	assert(t.milliseconds == 0);
	measure t sleep(0.0015);
	assert(t.milliseconds == 1);
}

PawsVoid test_paws_fileio()
{
	import paws.fileio;

	i = 0;
	open file("temp.txt", "w") {
		file.write("spam\n");
		++i;
	}
	open file("temp.txt", "wb") {
		file.write("foo\n");
		++i;
	}
	open file("temp.txt", "at") {
		file.write("bar\n");
		++i;
	}
	open file("temp.txt", "rb") {
		assert(file.read() == "foo\nbar\n");
		++i;
	}
	assert { open file("temp.txt", "~") { i += 100; } } throws PawsException("invalid mode ~");
	assert(i == 4);
}

PawsVoid test_paws_extend()
{
	import paws.extend;

	// Test expression definition
	if (1)
	{
		PawsString expr $E<PawsString> * $E<PawsInt>
		{
		build:
			$0.build();
			$1.build();
		run:
			assert(type($0) == PawsExpr<PawsString>);
			assert($0.getType() == PawsString);
			assert(type($0.run()) == PawsString);

			assert(type($1) == PawsExpr<PawsInt>);
			assert($1.getType() == PawsInt);
			assert(type($1.run()) == PawsInt);

			return $0.run().substr($1.run());
		}
		assert("spam" * 2 == "am");
	}
	assert("spam" * 2 == "spamspam");

	// Test statement definition
	stmt unless($E<PawsInt>) $S
	{
	build:
		$0.build();
		$1.build();
	run:
		if ($0.run() == 0)
			$1.run();
	}
	unless (0) assert(1);
	unless (1) assert(0);

	// Test return from build phase
	PawsString expr !X
	{
	build:
		return "X";
	}
	assert(!X == "X");

	// Tests $L<...> expression
	PawsInt expr $L<thousand> { return 1000 * $0.value.parseInt(); }
	assert(6thousand == 6000);
	PawsString expr $L<reverse>
	{
		str = "";
		for (s: $0.value.substr("reverse".length + 1, $0.value.length - "reverse".length - 2))
		{
			str = s + str;
		}
		return str;
	}
	assert(reverse"spam" == "maps");


	// Test identifier expression
	i = 0;
	stmt test identifier $I
	{
	build:
		assert($0.build()) throws PawsException("`id` was not declared in this scope");
	run:
		assert(type($0) == PawsIdExpr);
		assert($0.name == "id");
		assert($0.getType() == PawsVoid);
		assert(type($0.run()) == PawsVoid);
		assert($0.run()) throws PawsException("expression not built: id");
		++i;
	}
	test identifier id;
	stmt test identifier $I
	{
	build:
		$0.build();
	run:
		assert(type($0) == PawsIdExpr);
		assert($0.name == "id");
		assert($0.getType() == PawsVoid);
		assert(type($0.run()) == PawsVoid);
		assert($0.run() == NULL);
		++i;
	}
	id = 1;
	test identifier id;
	assert(i == 2);

	// Test literal expression
	i = 0;
	stmt test literal $L
	{
	build:
		$0.build();
	run:
		assert(type($0) == PawsLiteralExpr);
		assert($0.value == '"foo"');
		assert($0.getType() == PawsVoid);
		assert(type($0.run()) == PawsVoid);
		assert($0.run() == NULL);
		++i;
	}
	test literal "foo";
	stmt test literal $L
	{
	build:
		$0.build();
	run:
		assert(type($0) == PawsLiteralExpr);
		assert($0.value == '1');
		assert($0.getType() == PawsVoid);
		assert(type($0.run()) == PawsVoid);
		assert($0.run() == NULL);
		++i;
	}
	test literal 1;
	assert(i == 2);

	// Test block expression
	i = 0;
	stmt test block $B
	{
	build:
		$0.build();
	run:
		assert(type($0) == PawsBlockExpr);
		assert($0.getType() == PawsVoid);
		assert(type($0.run()) == PawsVoid);
		assert($0.run() == NULL);
		++i;
	}
	test block { ++i; };
	assert(i == 2);

	// Test statement expression
	i = 0;
	stmt test block $S
	{
	build:
		$0.build();
	run:
		assert(type($0) == PawsExpr);
		assert($0.getType() == PawsVoid);
		assert(type($0.run()) == PawsVoid);
		assert($0.run() == NULL);
		++i;
	}
	test block i++;
	assert(i == 2);
}

PawsVoid test_mutable_exprs()
{
	import paws.stmtreg;

	// Test mutable expressions after `if` body
	// Make sure expressions after the `if` block aren't resolved before executing the `if` block while looking for a possible if-else statement
	FILE_SCOPE = getFileScope();
	FILE_SCOPE.exprs[$E<PawsString> * $E<PawsString>] = <PawsString> { return "a"; }
	if (1)
	{
		FILE_SCOPE.exprs[$E<PawsString> * $E<PawsString>] = <PawsString> { return "b"; }
	}
	assert("" * "" == "b");

	// Test mutable expressions in loop body
	// Expressions are NOT reresolved for subsequent loop iterations
	// Reresolving expressions on every loop iteration would incure a significant performance penalty
	r = "";
	FILE_SCOPE.exprs[$E<PawsString> * $E<PawsString>] = <PawsString> { return "c"; }
	for (j = 0; j << 2; j = j + 1)
	{
		r = r + "" * "";
		FILE_SCOPE.exprs[$E<PawsString> * $E<PawsString>] = <PawsString> { return "d"; }
	}
	assert(r == "cc");
	assert("" * "" == "d");
}

measure("test time")
	for (t = 0; t << 2; t = t + 1) // Run all tests twice to test cached behaviour
	{
		test_paws();
		test_paws_int();
		test_paws_double();
		test_paws_string();
		test_paws_exceptions();
		test_paws_array();
		test_paws_subroutine();
		test_paws_struct();
		test_paws_frames();
		test_paws_time();
		test_paws_fileio();
		test_paws_extend();
		test_mutable_exprs();
	}

// Test file-scope `return $E<PawsInt>` statement
return 0;