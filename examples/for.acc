import <builtin.acc>;

printf("i: ");
for (int i = 0; i != 8; i = i + 1) {
	printf("%i", i);
}
printf("\n");

printf("j: ");
int j = 0;
while (j != 8) {
	printf("%i", j);
	j = j + 1;
}
printf("\n");

stmtdef for(int $I = $E; $E; $E) $S {
	// Allocate loop variable
	LLVMValueRef loopVar = LLVMBuildAlloca(LLVMInt32Type(), "");
	LLVMSetAlignment(loopVar, 4);
	LLVMSetAlignment(LLVMBuildStore(codegen($1, parentBlock), loopVar), 4);
	addToScope(parentBlock, $0, int, loopVar); //TODO: Don't add loop variable to parent scope

	// Create basic blocks
	LLVMBasicBlockRef forCondBlock = LLVMAppendBasicBlock(function, "forCondBlock");
	LLVMBasicBlockRef forBlock = LLVMAppendBasicBlock(function, "forBlock");
	LLVMBasicBlockRef endForBlock = LLVMAppendBasicBlock(function, "endForBlock");
	LLVMBuildBr(forCondBlock);

	// Exit for loop if condition isn't met
	LLVMPositionBuilder(forCondBlock);
	LLVMValueRef forCond = codegen($2, parentBlock); // Codegen condition in global scope //TODO: Don't codegen condition in parent scope

	LLVMBuildCondBr(forCond, forBlock, endForBlock);

	LLVMPositionBuilder(forBlock);
	codegen($4, parentBlock); // Codegen loop statement in global scope
	codegen($3, parentBlock); // Codegen update expression in global scope //TODO: Don't codegen update expression in parent scope

	// Repeat for loop
	LLVMBuildBr(forCondBlock);

	LLVMPositionBuilder(endForBlock);
}

printf("k: ");
for (int k = 0; k != 8; k = k + 1) printf("%i", k);
printf("\n");

return j;