import <builtin.acc>;

stmtdef BuiltinTypePtr $I {
	addToScope(parentBlock, $0, BuiltinTypePtr, LLVMBuildAlloca(LLVMPointerType(LLVMGetTypeByName("BuiltinType"), 0), ""));
}

exprdef<BuiltinTypePtr> toBuiltinType($E) {
	return LLVMBuildBitCast(
		$0.codegen(parentBlock),
		LLVMPointerType(LLVMGetTypeByName("BuiltinType"), 0),
		""
	);
}

exprdef<BuiltinTypePtr> $E<BuiltinTypePtr>.ptr = nullptr {
	LLVMValueRef ptr = LLVMBuildStructGEP($0.codegen(parentBlock), 1, "gep");
	LLVMSetAlignment(LLVMBuildStore(LLVMConstNull(LLVMPointerType(LLVMVoidType(), 0)), ptr), 8);
	ptr = LLVMBuildLoad(ptr, "ptr");
	return ptr;
}

exprdef<LLVMTypeRef> $E<BuiltinTypePtr>.llvmtype {
	LLVMValueRef llvmtype = LLVMBuildStructGEP($0.codegen(parentBlock), 2, "gep");
	llvmtype = LLVMBuildLoad(llvmtype, "llvmtype");
	LLVMSetAlignment(llvmtype, 8);
	return llvmtype;
}
exprdef<LLVMTypeRef> $E<BuiltinTypePtr>.llvmtype = $E<LLVMTypeRef> {
	LLVMValueRef llvmtype = LLVMBuildStructGEP($0.codegen(parentBlock), 2, "gep");
	LLVMSetAlignment(LLVMBuildStore($1.codegen(parentBlock), llvmtype), 8);
	llvmtype = LLVMBuildLoad(llvmtype, "llvmtype");
	return llvmtype;
}

exprdef<int> $E<BuiltinTypePtr>.align {
	LLVMValueRef align = LLVMBuildStructGEP($0.codegen(parentBlock), 3, "gep");
	align = LLVMBuildLoad(align, "align");
	LLVMSetAlignment(align, 4);
	return align;
}
exprdef<int> $E<BuiltinTypePtr>.align = $E<int> {
	LLVMValueRef align = LLVMBuildStructGEP($0.codegen(parentBlock), 3, "gep");
	LLVMSetAlignment(LLVMBuildStore($1.codegen(parentBlock), align), 4);
	align = LLVMBuildLoad(align, "align");
	return align;
}

exprdef<BuiltinType> BuiltinType($E<string>, $E<LLVMTypeRef>, $E<int>) {
	string malloc(long size);

	LLVMValueRef args[1];
	args[0] = LLVMConstInt(long.llvmtype, 32, 1);
	LLVMValueRef t = LLVMBuildCall(malloc, args, 1, "");

	t = LLVMBuildBitCast(t, LLVMPointerType(LLVMGetTypeByName("BuiltinType"), 0), "");

	LLVMValueRef ptr = LLVMBuildStructGEP(t, 1, "gep");
	LLVMSetAlignment(LLVMBuildStore(LLVMConstNull(LLVMPointerType(LLVMVoidType(), 0)), ptr), 8);

	LLVMValueRef llvmtype = LLVMBuildStructGEP(t, 2, "gep");
	LLVMSetAlignment(LLVMBuildStore($1.codegen(parentBlock), llvmtype), 8);

	LLVMValueRef align = LLVMBuildStructGEP(t, 3, "gep");
	LLVMSetAlignment(LLVMBuildStore($2.codegen(parentBlock), align), 4);

	return t;
}

typedef<BuiltinType> boool {
	// BuiltinTypePtr t;
	// t = toBuiltinType(malloc(256)); //36
	// t.ptr = nullptr;
	// t.name = "boool";
	// t.llvmtype = LLVMInt1Type();
	// t.align = 1;
	// return t;

return BuiltinType("boool", LLVMInt1Type(), 1);
}
castdef<boool> $E<int> {
	return LLVMBuildIsNotNull($0.codegen(parentBlock), "");
}
castdef<int> $E<boool> {
	return LLVMBuildZExt($0.codegen(parentBlock), LLVMInt32Type(), "");
}

stmtdef boool $I = $E<boool> {
	LLVMValueRef foo = LLVMBuildAlloca(boool.llvmtype, "");
	LLVMBuildStore($1.codegen(parentBlock), foo);
	addToScope(parentBlock, $0, boool, foo);
}
boool b = 123;
return b;
