/* ---------------------------------------------------------------------------*\
Name: Return statement
Template: return $E
Depends on: none
\* ---------------------------------------------------------------------------*/
stmtdef return $E<int> {
	LLVMBuildRet(codegen($0, parentBlock));
}

/* ---------------------------------------------------------------------------*\
Cast: LiteralExprAST to ExprAST
Depends on: return $E
\* ---------------------------------------------------------------------------*/
castdef<ExprAST> $E<LiteralExprAST> {
	return LLVMBuildBitCast(
		codegen($0, parentBlock),
		LLVMPointerType(LLVMGetTypeByName("class.ExprAST"), 0),
		""
	);
}

/* ---------------------------------------------------------------------------*\
Cast: IdExprAST to ExprAST
Depends on: return $E
\* ---------------------------------------------------------------------------*/
castdef<ExprAST> $E<IdExprAST> {
	return LLVMBuildBitCast(
		codegen($0, parentBlock),
		LLVMPointerType(LLVMGetTypeByName("class.ExprAST"), 0),
		""
	);
}

/* ---------------------------------------------------------------------------*\
Cast: BlockExprAST to ExprAST
Depends on: return $E
\* ---------------------------------------------------------------------------*/
castdef<ExprAST> $E<BlockExprAST> {
	return LLVMBuildBitCast(
		codegen($0, parentBlock),
		LLVMPointerType(LLVMGetTypeByName("class.ExprAST"), 0),
		""
	);
}


/* ---------------------------------------------------------------------------*\
|                                                                              |
|                                  LLVM TYPES                                  |
|                                                                              |
\* ---------------------------------------------------------------------------*/


/* ---------------------------------------------------------------------------*\
Name: LLVMValueRef declaration
Template: LLVMValueRef $I
Depends on: none
\* ---------------------------------------------------------------------------*/
stmtdef LLVMValueRef $I {
	addToScope(parentBlock, $0, LLVMValueRef, LLVMBuildAlloca(LLVMPointerType(LLVMGetTypeByName("struct.LLVMOpaqueValue"), 0), ""));
}

/* ---------------------------------------------------------------------------*\
Name: LLVMValueRef declaration with initialization
Template: LLVMValueRef $I = $E<LLVMValueRef>
Depends on: LLVMValueRef $I
\* ---------------------------------------------------------------------------*/
stmtdef LLVMValueRef $I = $E<LLVMValueRef> {
	LLVMValueRef foo;
	foo = LLVMBuildAlloca(LLVMPointerType(LLVMGetTypeByName("struct.LLVMOpaqueValue"), 0), "");
	LLVMBuildStore(codegen($1, parentBlock), foo);
	addToScope(parentBlock, $0, LLVMValueRef, foo);
}

stmtdef LLVMValueRef $I[$L] {
	// Fixed size array:
	/*addToScope(
		parentBlock,
		$0,
		LLVMValueRef,
		LLVMBuildAlloca(
			LLVMArrayType(LLVMPointerType(LLVMGetTypeByName("struct.LLVMOpaqueValue"), 0), atoi($1.value)),
			""
		)
	);*/

	// Dynamic array:
	LLVMValueRef array = LLVMBuildArrayAlloca(
		LLVMPointerType(LLVMGetTypeByName("struct.LLVMOpaqueValue"), 0),
		codegen($1, parentBlock),
		""
	);
	LLVMValueRef arrayptr = LLVMBuildAlloca(LLVMPointerType(LLVMPointerType(LLVMGetTypeByName("struct.LLVMOpaqueValue"), 0), 0), "");
	LLVMBuildStore(
		array,
		arrayptr
	);
	addToScope(
		parentBlock,
		$0,
		LLVMValueRefPtr,
		arrayptr
	);
}

//TODO: Generalize to `exprdef<gettype($2, parentBlock)> $E[$E<int>] = $E {`
exprdef<LLVMValueRef> $E<LLVMValueRefPtr>[$E<int>] = $E<LLVMValueRef> {
	LLVMValueRef var = codegen($0, parentBlock);
	LLVMValueRef idx = codegen($1, parentBlock);

	LLVMValueRef gep = LLVMBuildInBoundsGEP1(var, idx, "");

	LLVMValueRef expr = codegen($2, parentBlock);
	LLVMBuildStore(
		expr,
		gep
	);
	return expr;
}

//TODO: Untested
exprdef<LLVMValueRef> $E<LLVMValueRefPtr>[$E<int>] {
	LLVMValueRef var = codegen($0, parentBlock);
	LLVMValueRef idx = codegen($1, parentBlock);

	LLVMValueRef gep = LLVMBuildInBoundsGEP1(var, idx, "");
	LLVMValueRef val = LLVMBuildLoad(gep, "");
	LLVMSetAlignment(val, 8);
	return val;
}

/* ---------------------------------------------------------------------------*\
Name: LLVMBasicBlockRef declaration
Template: LLVMBasicBlockRef $I
Depends on: none
\* ---------------------------------------------------------------------------*/
stmtdef LLVMBasicBlockRef $I {
	addToScope(parentBlock, $0, LLVMBasicBlockRef, LLVMBuildAlloca(LLVMPointerType(LLVMGetTypeByName("struct.LLVMOpaqueBasicBlock"), 0), ""));
}

/* ---------------------------------------------------------------------------*\
Name: LLVMBasicBlockRef declaration with initialization
Template: LLVMBasicBlockRef $I = $E<LLVMBasicBlockRef>
Depends on: LLVMBasicBlockRef $I
\* ---------------------------------------------------------------------------*/
stmtdef LLVMBasicBlockRef $I = $E<LLVMBasicBlockRef> {
	LLVMValueRef foo = LLVMBuildAlloca(LLVMPointerType(LLVMGetTypeByName("struct.LLVMOpaqueBasicBlock"), 0), "");
	LLVMBuildStore(codegen($1, parentBlock), foo);
	addToScope(parentBlock, $0, LLVMBasicBlockRef, foo);
}

/* ---------------------------------------------------------------------------*\
Name: LLVMTypeRef declaration
Template: LLVMTypeRef $I
Depends on: none
\* ---------------------------------------------------------------------------*/
stmtdef LLVMTypeRef $I {
	addToScope(parentBlock, $0, LLVMTypeRef, LLVMBuildAlloca(LLVMPointerType(LLVMGetTypeByName("struct.LLVMOpaqueType"), 0), ""));
}

/* ---------------------------------------------------------------------------*\
Name: LLVMTypeRef declaration with initialization
Template: LLVMTypeRef $I = $E<LLVMTypeRef>
Depends on: LLVMTypeRef $I
\* ---------------------------------------------------------------------------*/
stmtdef LLVMTypeRef $I = $E<LLVMTypeRef> {
	LLVMValueRef foo = LLVMBuildAlloca(LLVMPointerType(LLVMGetTypeByName("struct.LLVMOpaqueType"), 0), "");
	LLVMBuildStore(codegen($1, parentBlock), foo);
	addToScope(parentBlock, $0, LLVMTypeRef, foo);
}

stmtdef LLVMTypeRef $I[$L] {
	// Fixed size array:
	/*addToScope(
		parentBlock,
		$0,
		LLVMTypeRef,
		LLVMBuildAlloca(
			LLVMArrayType(LLVMPointerType(LLVMGetTypeByName("struct.LLVMOpaqueType"), 0), atoi($1.value)),
			""
		)
	);*/

	// Dynamic array:
	LLVMValueRef array = LLVMBuildArrayAlloca(
		LLVMPointerType(LLVMGetTypeByName("struct.LLVMOpaqueType"), 0),
		codegen($1, parentBlock),
		""
	);
	LLVMValueRef arrayptr = LLVMBuildAlloca(LLVMPointerType(LLVMPointerType(LLVMGetTypeByName("struct.LLVMOpaqueType"), 0), 0), "");
	LLVMBuildStore(
		array,
		arrayptr
	);
	addToScope(
		parentBlock,
		$0,
		LLVMTypeRefPtr,
		arrayptr
	);
}

/* ---------------------------------------------------------------------------*\
Name: BaseType declaration
Template: BaseType $I
Depends on: none
\* ---------------------------------------------------------------------------*/
stmtdef BaseType $I {
	addToScope(parentBlock, $0, BaseType, LLVMBuildAlloca(LLVMPointerType(LLVMGetTypeByName("BaseType"), 0), ""));
}

/* ---------------------------------------------------------------------------*\
Name: BaseType declaration with initialization
Template: BaseType $I = $E
TODO: Should be $I = $E<BaseType>
Depends on: BaseType $I
\* ---------------------------------------------------------------------------*/
stmtdef BaseType $I = $E {
	LLVMValueRef foo = LLVMBuildAlloca(LLVMPointerType(LLVMGetTypeByName("BaseType"), 0), "");
	LLVMBuildStore(codegen($1, parentBlock), foo);
	addToScope(parentBlock, $0, BaseType, foo);
}


/* ---------------------------------------------------------------------------*\
|                                                                              |
|                                  AST TYPES                                   |
|                                                                              |
\* ---------------------------------------------------------------------------*/


/* ---------------------------------------------------------------------------*\
Name: ExprAST declaration
Template: ExprAST $I
Depends on: none
\* ---------------------------------------------------------------------------*/
stmtdef ExprAST $I {
	addToScope(parentBlock, $0, ExprAST, LLVMBuildAlloca(LLVMPointerType(LLVMGetTypeByName("class.ExprAST"), 0), ""));
}

/* ---------------------------------------------------------------------------*\
Name: ExprAST declaration with initialization
Template: ExprAST $I = $E
Depends on: ExprAST $I
\* ---------------------------------------------------------------------------*/
stmtdef ExprAST $I = $E<ExprAST> {
	LLVMValueRef foo = LLVMBuildAlloca(LLVMPointerType(LLVMGetTypeByName("class.ExprAST"), 0), "");
	LLVMBuildStore(codegen($1, parentBlock), foo);
	addToScope(parentBlock, $0, ExprAST, foo);
}

/* ---------------------------------------------------------------------------*\
Name: LiteralExprAST declaration
Template: LiteralExprAST $I
Depends on: none
\* ---------------------------------------------------------------------------*/
stmtdef LiteralExprAST $I {
	addToScope(parentBlock, $0, LiteralExprAST, LLVMBuildAlloca(LLVMPointerType(LLVMGetTypeByName("class.LiteralExprAST"), 0), ""));
}

/* ---------------------------------------------------------------------------*\
Name: LiteralExprAST declaration with initialization
Template: LiteralExprAST $I = $E
Depends on: LiteralExprAST $I
\* ---------------------------------------------------------------------------*/
stmtdef LiteralExprAST $I = $E<LiteralExprAST> {
	LLVMValueRef foo = LLVMBuildAlloca(LLVMPointerType(LLVMGetTypeByName("class.LiteralExprAST"), 0), "");
	LLVMBuildStore(codegen($1, parentBlock), foo);
	addToScope(parentBlock, $0, LiteralExprAST, foo);
}

/* ---------------------------------------------------------------------------*\
Name: IdExprAST declaration
Template: IdExprAST $I
Depends on: none
\* ---------------------------------------------------------------------------*/
stmtdef IdExprAST $I {
	addToScope(parentBlock, $0, IdExprAST, LLVMBuildAlloca(LLVMPointerType(LLVMGetTypeByName("class.IdExprAST"), 0), ""));
}

/* ---------------------------------------------------------------------------*\
Name: IdExprAST declaration with initialization
Template: IdExprAST $I = $E
Depends on: IdExprAST $I
\* ---------------------------------------------------------------------------*/
stmtdef IdExprAST $I = $E<IdExprAST> {
	LLVMValueRef foo = LLVMBuildAlloca(LLVMPointerType(LLVMGetTypeByName("class.IdExprAST"), 0), "");
	LLVMBuildStore(codegen($1, parentBlock), foo);
	addToScope(parentBlock, $0, IdExprAST, foo);
}

/* ---------------------------------------------------------------------------*\
Name: BlockExprAST declaration
Template: BlockExprAST $I
Depends on: none
\* ---------------------------------------------------------------------------*/
stmtdef BlockExprAST $I {
	addToScope(parentBlock, $0, BlockExprAST, LLVMBuildAlloca(LLVMPointerType(LLVMGetTypeByName("class.BlockExprAST"), 0), ""));
}

/* ---------------------------------------------------------------------------*\
Name: BlockExprAST declaration with initialization
Template: BlockExprAST $I = $E
Depends on: BlockExprAST $I
\* ---------------------------------------------------------------------------*/
stmtdef BlockExprAST $I = $E<BlockExprAST> {
	LLVMValueRef foo = LLVMBuildAlloca(LLVMPointerType(LLVMGetTypeByName("class.BlockExprAST"), 0), "");
	LLVMBuildStore(codegen($1, parentBlock), foo);
	addToScope(parentBlock, $0, BlockExprAST, foo);
}

exprdef<string> $E<LiteralExprAST>.value {
	LLVMValueRef args[1];
	args[0] = codegen($0, parentBlock);
	return LLVMBuildCall(
		getLiteralExprASTValue,
		args,
		1,
		""
	);
}

exprdef<string> $E<IdExprAST>.name {
	LLVMValueRef args[1];
	args[0] = codegen($0, parentBlock);
	return LLVMBuildCall(
		getIdExprASTName,
		args,
		1,
		""
	);
}

exprdef<BlockExprAST> $E<BlockExprAST>.parent {
	LLVMValueRef args[1];
	args[0] = codegen($0, parentBlock);
	return LLVMBuildCall(
		getBlockExprASTParent,
		args,
		1,
		""
	);
}

exprdef<BlockExprAST> $E<BlockExprAST>.parent = $E<BlockExprAST> {
	LLVMValueRef args[1];
	args[0] = codegen($0, parentBlock);
	args[1] = codegen($1, parentBlock);
	return LLVMBuildCall(
		setBlockExprASTParent,
		args,
		2,
		""
	);
}


/* ---------------------------------------------------------------------------*\
|                                                                              |
|                                NUMERIC TYPES                                 |
|                                                                              |
\* ---------------------------------------------------------------------------*/


/* ---------------------------------------------------------------------------*\
Name: 32 bit signed integer declaration
Template: int $I
Depends on: none
\* ---------------------------------------------------------------------------*/
stmtdef int $I {
	LLVMValueRef storage = LLVMBuildAlloca(LLVMInt32Type(), "");
	LLVMSetAlignment(storage, 4);
	addToScope(parentBlock, $0, int, storage);

	LLVMDIBuilderInsertDeclareAtEnd(
		storage,
		LLVMDIBuilderCreateAutoVariable(
			LLVMGetSubprogram(function),
			$0.name,
			strlen($0.name),
			dfile,
			getExprLine($0),
			intType,
			1,
			0,
			0
		),
		LLVMDIBuilderCreateExpression(),
		LLVMDIBuilderCreateDebugLocation(getExprLine($0), getExprColumn($0), LLVMGetSubprogram(function)),
		LLVMGetInsertBlock()
	);
}

/* ---------------------------------------------------------------------------*\
Name: 32 bit signed integer declaration with initialization
Template: int $I = $E<int>
Depends on: LLVMValueRef $I = $E<LLVMValueRef>
\* ---------------------------------------------------------------------------*/
stmtdef int $I = $E<int> {
	LLVMValueRef storage = LLVMBuildAlloca(LLVMInt32Type(), "");
	LLVMSetAlignment(storage, 4);
	LLVMBuildStore(codegen($1, parentBlock), storage);
	addToScope(parentBlock, $0, int, storage);

	// LLVMDIBuilderInsertDeclareAtEnd(
	// 	storage,
	// 	LLVMDIBuilderCreateAutoVariable(
	// 		LLVMGetSubprogram(function),
	// 		$0.name,
	// 		strlen($0.name),
	// 		dfile,
	// 		getExprLine($0),
	// 		intType,
	// 		1,
	// 		0,
	// 		0
	// 	),
	// 	LLVMDIBuilderCreateExpression(),
	// 	LLVMDIBuilderCreateDebugLocation(getExprLine($0), getExprColumn($0), LLVMGetSubprogram(function)),
	// 	LLVMGetInsertBlock()
	// );
}

/* ---------------------------------------------------------------------------*\
Name: Integer addition
Template: $E<int> + $E<int>
Depends on: return $E
\* ---------------------------------------------------------------------------*/
exprdef<int> $E<int> + $E<int> {
	return LLVMBuildAdd(codegen($0, parentBlock), codegen($1, parentBlock), "add");
}

/* ---------------------------------------------------------------------------*\
Name: Integer subtraction
Template: $E<int> - $E<int>
Depends on: return $E
\* ---------------------------------------------------------------------------*/
exprdef<int> $E<int> - $E<int> {
	return LLVMBuildSub(codegen($0, parentBlock), codegen($1, parentBlock), "sub");
}

/* ---------------------------------------------------------------------------*\
Name: Integer multiplication
Template: $E<int> * $E<int>
Depends on: return $E
\* ---------------------------------------------------------------------------*/
exprdef<int> $E<int> * $E<int> {
	return LLVMBuildMul(codegen($0, parentBlock), codegen($1, parentBlock), "mul");
}

/* ---------------------------------------------------------------------------*\
Name: Integer division
Template: $E<int> / $E<int>
Depends on: return $E
\* ---------------------------------------------------------------------------*/
exprdef<int> $E<int> / $E<int> {
	return LLVMBuildSDiv(codegen($0, parentBlock), codegen($1, parentBlock), "div");
}

exprdef<bool> $E<int> == $E<int> {
int LLVMIntEQ = 32; //TODO: Implement LLVM-c enums as constants
	return LLVMBuildICmp(LLVMIntEQ, codegen($0, parentBlock), codegen($1, parentBlock), "cmp");
}

exprdef<bool> $E<int> != $E<int> {
int LLVMIntNE = 33; //TODO: Implement LLVM-c enums as constants
	return LLVMBuildICmp(LLVMIntNE, codegen($0, parentBlock), codegen($1, parentBlock), "cmp");
}

/* ---------------------------------------------------------------------------*\
Name: 64 bit float declaration
Template: double $I
Depends on: none
\* ---------------------------------------------------------------------------*/
stmtdef double $I {
	LLVMValueRef foo = LLVMBuildAlloca(LLVMDoubleType(), "");
	LLVMSetAlignment(foo, 8);
	addToScope(parentBlock, $0, double, foo);
}

/* ---------------------------------------------------------------------------*\
Name: 64 bit float declaration with initialization
Template: int $I = $E<double>
Depends on: LLVMValueRef $I = $E<LLVMValueRef>
\* ---------------------------------------------------------------------------*/
stmtdef double $I = $E<double> {
	LLVMValueRef foo = LLVMBuildAlloca(LLVMDoubleType(), "");
	LLVMSetAlignment(foo, 8);
	LLVMBuildStore(codegen($1, parentBlock), foo);
	addToScope(parentBlock, $0, double, foo);
}

/* ---------------------------------------------------------------------------*\
Name: 64 bit float addition
Template: $E<double> + $E<double>
Depends on: return $E
\* ---------------------------------------------------------------------------*/
exprdef<double> $E<double> + $E<double> {
	return LLVMBuildFAdd(codegen($0, parentBlock), codegen($1, parentBlock), "fadd");
}

/* ---------------------------------------------------------------------------*\
Name: 64 bit float multiplication
Template: $E<double> * $E<double>
Depends on: return $E
\* ---------------------------------------------------------------------------*/
exprdef<double> $E<double> * $E<double> {
	return LLVMBuildFMul(codegen($0, parentBlock), codegen($1, parentBlock), "fmul");
}

exprdef<bool> $E<double> == $E<double> { //TODO: Untested
int LLVMRealOEQ = 1; //TODO: Implement LLVM-c enums as constants //TODO: Untested
	return LLVMBuildFCmp(LLVMRealOEQ, codegen($0, parentBlock), codegen($1, parentBlock), "fcmp");
}

exprdef<bool> $E<double> != $E<double> { //TODO: Untested
int LLVMRealONE = 6; //TODO: Implement LLVM-c enums as constants //TODO: Untested
	return LLVMBuildFCmp(LLVMRealONE, codegen($0, parentBlock), codegen($1, parentBlock), "fcmp");
}

/* ---------------------------------------------------------------------------*\
Cast: int to double
Depends on: return $E
\* ---------------------------------------------------------------------------*/
castdef<double> $E<int> {
	return LLVMBuildSIToFP(
		codegen($0, parentBlock),
		LLVMDoubleType(),
		""
	);
}

/* ---------------------------------------------------------------------------*\
Cast: double to int
Depends on: return $E
\* ---------------------------------------------------------------------------*/
castdef<int> $E<double> {
	return LLVMBuildFPToSI(
		codegen($0, parentBlock),
		LLVMInt32Type(),
		""
	);
}

/* ---------------------------------------------------------------------------*\
Cast: double to long
Depends on: return $E
\* ---------------------------------------------------------------------------*/
castdef<long> $E<double> {
	return LLVMBuildFPToSI(
		codegen($0, parentBlock),
		LLVMInt64Type(),
		""
	);
}

/* ---------------------------------------------------------------------------*\
Cast: bool to int
Depends on: return $E
\* ---------------------------------------------------------------------------*/
castdef<int> $E<bool> {
	return LLVMBuildZExt(
		codegen($0, parentBlock),
		LLVMInt32Type(),
		""
	);
}

/* ---------------------------------------------------------------------------*\
Cast: int to bool
Depends on: return $E
\* ---------------------------------------------------------------------------*/
castdef<bool> $E<int> { return LLVMBuildIsNotNull(codegen($0, parentBlock), ""); }

/* ---------------------------------------------------------------------------*\
Cast: int to long
Depends on: return $E
\* ---------------------------------------------------------------------------*/
castdef<long> $E<int> {
	return LLVMBuildSExt(
		codegen($0, parentBlock),
		LLVMInt64Type(),
		""
	);
}


/* ---------------------------------------------------------------------------*\
|                                                                              |
|                                  MISC TYPES                                  |
|                                                                              |
\* ---------------------------------------------------------------------------*/

exprdef<bool> $E<BuiltinType> == $E<BuiltinType> {
int LLVMIntEQ = 32; //TODO: Implement LLVM-c enums as constants
	return LLVMBuildICmp(LLVMIntEQ, codegen($0, parentBlock), codegen($1, parentBlock), "cmp");
}

exprdef<bool> $E<BuiltinType> != $E<BuiltinType> {
int LLVMIntNE = 33; //TODO: Implement LLVM-c enums as constants
	return LLVMBuildICmp(LLVMIntNE, codegen($0, parentBlock), codegen($1, parentBlock), "cmp");
}

/* ---------------------------------------------------------------------------*\
Cast: BuiltinType to BaseType
Depends on: return $E
\* ---------------------------------------------------------------------------*/
castdef<BaseType> $E<BuiltinType> {
	return LLVMBuildBitCast(
		codegen($0, parentBlock),
		LLVMPointerType(LLVMGetTypeByName("BaseType"), 0),
		""
	);
}


/* ---------------------------------------------------------------------------*\
|                                                                              |
|                           FLOW CONTROL STATEMENTS                            |
|                                                                              |
\* ---------------------------------------------------------------------------*/


/* ---------------------------------------------------------------------------*\
Name: If statement
Template: if($E<bool>) $S
Depends on: LLVMValueRef $I = $E<LLVMValueRef>
            LLVMBasicBlockRef $I = $E<LLVMBasicBlockRef>
\* ---------------------------------------------------------------------------*/
stmtdef if($E<bool>) $S {
	LLVMValueRef ifCond = codegen($0, parentBlock);
	LLVMBasicBlockRef ifBlock = LLVMAppendBasicBlock(function, "ifBlock");
	LLVMBasicBlockRef elseBlock = LLVMAppendBasicBlock(function, "elseBlock");
	LLVMBuildCondBr(ifCond, ifBlock, elseBlock);

	LLVMPositionBuilder(ifBlock);
	codegen($1, parentBlock);
	LLVMBuildBr(elseBlock);

	LLVMPositionBuilder(elseBlock);
}

/* ---------------------------------------------------------------------------*\
Name: If-else statement
Template: if($E<bool>) $S else $S
Depends on: LLVMValueRef $I = $E<LLVMValueRef>
            LLVMBasicBlockRef $I = $E<LLVMBasicBlockRef>
\* ---------------------------------------------------------------------------*/
stmtdef if($E<bool>) $S else $S {
	LLVMValueRef ifCond = codegen($0, parentBlock);
	LLVMBasicBlockRef ifBlock = LLVMAppendBasicBlock(function, "ifBlock");
	LLVMBasicBlockRef elseBlock = LLVMAppendBasicBlock(function, "elseBlock");
	LLVMBasicBlockRef endIfBlock = LLVMAppendBasicBlock(function, "endIfBlock");
	LLVMBuildCondBr(ifCond, ifBlock, elseBlock);

	LLVMPositionBuilder(ifBlock);
	codegen($1, parentBlock);
	LLVMBuildBr(endIfBlock);

	LLVMPositionBuilder(elseBlock);
	codegen($2, parentBlock);
	LLVMBuildBr(endIfBlock);

	LLVMPositionBuilder(endIfBlock);
}

stmtdef for(int $I = $E; $E; $E) $B {
	// Inherent global scope into for block scope
	$4.parent = parentBlock;

	// Allocate loop variable
	LLVMValueRef loopVar = LLVMBuildAlloca(LLVMInt32Type(), "");
	LLVMSetAlignment(loopVar, 4);
	LLVMSetAlignment(LLVMBuildStore(codegen($1, parentBlock), loopVar), 4);
	addToScope($4, $0, int, loopVar);

	// Create basic blocks
	LLVMBasicBlockRef forCondBlock = LLVMAppendBasicBlock(function, "forCondBlock");
	LLVMBasicBlockRef forBlock = LLVMAppendBasicBlock(function, "forBlock");
	LLVMBasicBlockRef endForBlock = LLVMAppendBasicBlock(function, "endForBlock");
	LLVMBuildBr(forCondBlock);

	// Exit for loop if condition isn't met
	LLVMPositionBuilder(forCondBlock);
	LLVMValueRef forCond = codegen($2, $4); // Codegen condition in loop block scope
	LLVMBuildCondBr(forCond, forBlock, endForBlock);

	LLVMPositionBuilder(forBlock);
	codegen($4, parentBlock); // Codegen loop block in global scope
	codegen($3, $4); // Codegen update expression in loop block scope

	// Repeat for loop
	LLVMBuildBr(forCondBlock);

	LLVMPositionBuilder(endForBlock);
}

stmtdef while ($E<bool>) $S {
	// Create basic blocks
	LLVMBasicBlockRef whileBlock = LLVMAppendBasicBlock(function, "whileBlock");
	LLVMBasicBlockRef endWhileBlock = LLVMAppendBasicBlock(function, "endWhileBlock");

	// Skip while loop if condition isn't met
	LLVMValueRef whileCond = codegen($0, parentBlock);
	LLVMBuildCondBr(whileCond, whileBlock, endWhileBlock);

	LLVMPositionBuilder(whileBlock);
	codegen($1, parentBlock); // Codegen loop block

	// Repeat while loop if condition is met
	whileCond = codegen($0, parentBlock);
	LLVMBuildCondBr(whileCond, whileBlock, endWhileBlock);

	LLVMPositionBuilder(endWhileBlock);
}