import <builtin.acc>;

/* ---------------------------------------------------------------------------*\
|                                                                              |
|                               PYTHON TYPEDEF'S                               |
|                                                                              |
\* ---------------------------------------------------------------------------*/

string malloc(long size);
exprdef<BuiltinType> BuiltinType($E<string>, $E<LLVMTypeRef>, $E<int>) {
	LLVMValueRef args[1];
	args[0] = LLVMConstInt(LLVMInt64Type(), 32, 1);
	LLVMValueRef t = LLVMBuildCall(malloc, args, 1, "");

	t = LLVMBuildBitCast(t, LLVMPointerType(LLVMGetTypeByName("BuiltinType"), 0), "");

	LLVMValueRef ptr = LLVMBuildStructGEP(t, 1, "gep");
	LLVMSetAlignment(LLVMBuildStore(LLVMConstNull(LLVMPointerType(LLVMVoidType(), 0)), ptr), 8);

	LLVMValueRef llvmtype = LLVMBuildStructGEP(t, 2, "gep");
	LLVMSetAlignment(LLVMBuildStore($1.codegen(parentBlock), llvmtype), 8);

	LLVMValueRef align = LLVMBuildStructGEP(t, 3, "gep");
	LLVMSetAlignment(LLVMBuildStore($2.codegen(parentBlock), align), 4);

	return t;
}
typedef<BuiltinType> PyTypeObject {
	LLVMTypeRef pytpeobjtype = LLVMStructCreateNamed(LLVMGetModuleContext(), "class.PyTypeObject");
	return BuiltinType("PyTypeObject", LLVMPointerType(pytpeobjtype, 0), 8);
}
typedef<BuiltinType> PyObject {
	LLVMTypeRef pyobjtype = LLVMStructCreateNamed(LLVMGetModuleContext(), "class.PyObject");
	LLVMTypeRef pytpeobjtype = LLVMGetTypeByName("class.PyTypeObject");
	LLVMTypeRef pyobjSubtypes[2];
	pyobjSubtypes[0] = LLVMInt64Type();
	pyobjSubtypes[1] = LLVMPointerType(pytpeobjtype, 0);
	LLVMStructSetBody(pyobjtype, pyobjSubtypes, 2, 0);
	return BuiltinType("PyObject", LLVMPointerType(pyobjtype, 0), 8);
}
inhtdef<BuiltinValue> $E<PyObject>;
exprdef<PyTypeObject> $E<PyObject>.ob_type {
	LLVMValueRef llvmtype = LLVMBuildStructGEP($0.codegen(parentBlock), 1, "gep");
	llvmtype = LLVMBuildLoad(llvmtype, "ob_type");
	LLVMSetAlignment(llvmtype, 8);
	return llvmtype;
}

/* ---------------------------------------------------------------------------*\
|                                                                              |
|                             PYTHON API FUNCTIONS                             |
|                                                                              |
\* ---------------------------------------------------------------------------*/

void Py_Initialize();
void Py_Finalize();
PyObject PyEval_GetBuiltins(void);

PyObject PyUnicode_FromString(string u);
string PyUnicode_AsUTF8(PyObject unicode);

PyObject PyLong_FromLong(long v);
long PyLong_AsLong(PyObject obj);

PyObject PyTuple_New(long len);
int PyTuple_SetItem(PyObject p, long pos, PyObject o);

PyObject PyList_New(long len);
int PyList_SetItem(PyObject p, long pos, PyObject o);

PyObject PyDict_GetItem(PyObject p, PyObject key);
PyObject PyDict_Items(PyObject p);
PyObject PyDict_Keys(PyObject p);
PyObject PyDict_Values(PyObject p);

long PyMapping_Size(PyObject o);
int PyMapping_HasKey(PyObject o, PyObject key);

long PySequence_Length(PyObject o);
PyObject PySequence_GetItem(PyObject o, long i);

PyObject PyIter_Next(PyObject o);

PyObject PyNumber_Add(PyObject o1, PyObject o2);
PyObject PyNumber_Subtract(PyObject o1, PyObject o2);
PyObject PyNumber_Multiply(PyObject o1, PyObject o2);
PyObject PyNumber_TrueDivide(PyObject o1, PyObject o2);

PyObject PyObject_GetIter(PyObject o);
PyObject PyObject_GetAttr(PyObject o, PyObject attr_name);
PyObject PyObject_GetAttrString(PyObject o, string attr_name);
PyObject PyObject_Str(PyObject);
PyObject PyObject_Repr(PyObject);
PyObject PyObject_CallObject(PyObject callable, PyObject args);
PyObject PyObject_CallFunctionObjArgs(PyObject callable, ...);

long PyType_GetFlags(PyTypeObject type);

PyObject PyErr_Occurred(void);

PyObject PyImport_ImportModule(string name);
PyObject PyImport_ImportModuleLevel(string name, PyObject globals, PyObject locals, PyObject fromlist, int level);

/* ---------------------------------------------------------------------------*\
|                                                                              |
|                              PYTHON STATEMENTS                               |
|                                                                              |
\* ---------------------------------------------------------------------------*/

exprdef<PyObject> $I<NULL!> = $E<PyObject> {
	LLVMValueRef expr = $1.codegen(parentBlock);
	LLVMValueRef obj = LLVMAddGlobal(LLVMPointerType(LLVMGetTypeByName("class.PyObject"), 0), $0.name);
	LLVMSetInitializer(obj, LLVMConstNull(LLVMPointerType(LLVMGetTypeByName("class.PyObject"), 0)));
	LLVMBuildStore(expr, obj);
	addToScope(parentBlock, $0, PyObject, obj);
	return expr;
}
exprdef<PyObject> $I<PyObject!> = $E<PyObject> {
	LLVMValueRef expr = $1.codegen(parentBlock);
	LLVMValueRef obj = ImportSymbol(parentBlock, $0);
	LLVMBuildStore(expr, obj);
	return expr;
}

castdef<PyObject> $E<string> {
	LLVMValueRef args[1];
	args[0] = $0.codegen(parentBlock);
	return LLVMBuildCall(PyUnicode_FromString, args, 1, "");
}

castdef<PyObject> $E<long> {
	LLVMValueRef args[1];
	args[0] = $0.codegen(parentBlock);
	return LLVMBuildCall(PyLong_FromLong, args, 1, "");
}

castdef<PyObject> $E<int> {
	LLVMValueRef args[1];
	args[0] = LLVMBuildSExt($0.codegen(parentBlock), LLVMInt64Type(), "");
	return LLVMBuildCall(PyLong_FromLong, args, 1, "");
}

castdef<long> $E<PyObject> {
	LLVMValueRef args[1];
	args[0] = $0.codegen(parentBlock);
	return LLVMBuildCall(PyLong_AsLong, args, 1, "");
}
castdef<int> $E<PyObject> {
	LLVMValueRef args[1];
	args[0] = $0.codegen(parentBlock);
	return LLVMBuildTrunc(LLVMBuildCall(PyLong_AsLong, args, 1, ""), LLVMInt32Type(), "");
}

exprdef<bool> $E<PyObject> == $E<PyObject> {
	return LLVMBuildICmp(LLVMIntEQ, $0.codegen(parentBlock), $1.codegen(parentBlock), "cmp");
}

exprdef<bool> $E<PyObject> != $E<PyObject> {
	return LLVMBuildICmp(LLVMIntNE, $0.codegen(parentBlock), $1.codegen(parentBlock), "cmp");
}

exprdef<PyObject> $E<PyObject> + $E<PyObject> {
	LLVMValueRef args[2];
	args[0] = $0.codegen(parentBlock);
	args[1] = $1.codegen(parentBlock);
	return LLVMBuildCall(PyNumber_Add, args, 2, "");
}

exprdef<PyObject> $E<PyObject> - $E<PyObject> {
	LLVMValueRef args[2];
	args[0] = $0.codegen(parentBlock);
	args[1] = $1.codegen(parentBlock);
	return LLVMBuildCall(PyNumber_Subtract, args, 2, "");
}

exprdef<PyObject> $E<PyObject> * $E<PyObject> {
	LLVMValueRef args[2];
	args[0] = $0.codegen(parentBlock);
	args[1] = $1.codegen(parentBlock);
	return LLVMBuildCall(PyNumber_Multiply, args, 2, "");
}

exprdef<PyObject> $E<PyObject> / $E<PyObject> {
	LLVMValueRef args[2];
	args[0] = $0.codegen(parentBlock);
	args[1] = $1.codegen(parentBlock);
	return LLVMBuildCall(PyNumber_TrueDivide, args, 2, "");
}

stmtdef for $I in $E<PyObject> $B {
	LLVMValueRef args[256]; //TODO

	// Add iterator variable to block scope
	LLVMValueRef iterVar = LLVMBuildAlloca(LLVMPointerType(LLVMGetTypeByName("class.PyObject"), 0), $0.name);
	addToScope($2, $0, PyObject, iterVar);

	// // TODO: Check if iterated object is supports iterator protocol
	// args[0] = $1.codegen(parentBlock);
	// LLVMValueRef isIter = LLVMBuildCall(PyIter_Check, args, 1, "");
	// //TODO: Raise exception if isIter is false

	// Get iterator
	args[0] = $1.codegen(parentBlock);
	LLVMValueRef iter = LLVMBuildCall(PyObject_GetIter, args, 1, "");

	// Create basic blocks
	LLVMBasicBlockRef forCondBlock = LLVMAppendBasicBlock(function, "forCondBlock");
	LLVMBasicBlockRef forBlock = LLVMAppendBasicBlock(function, "forBlock");
	LLVMBasicBlockRef endForBlock = LLVMAppendBasicBlock(function, "endForBlock");
	LLVMBuildBr(forCondBlock);

	// Exit for loop if condition isn't met
	LLVMPositionBuilder(forCondBlock);
	args[0] = iter;
	iter = LLVMBuildCall(PyIter_Next, args, 1, "");
	LLVMValueRef forCond = LLVMBuildICmp(LLVMIntNE, iter, LLVMConstNull(LLVMPointerType(LLVMGetTypeByName("class.PyObject"), 0)), "");
	LLVMBuildCondBr(forCond, forBlock, endForBlock);

	LLVMPositionBuilder(forBlock);
	LLVMBuildStore(iter, iterVar); // Set iterator variable value
	$2.codegen(parentBlock); // Codegen loop block

	// Repeat for loop
	LLVMBuildBr(forCondBlock);

	LLVMPositionBuilder(endForBlock);
}

PyObject in(PyObject obj, PyObject key) //TODO: Implement as expr $<PyObject> in $E<PyObject>
{
	inobj = PyMapping_HasKey(obj, key);
	return inobj;
}

exprdef<bool> IsNULL($E<PyObject>) {
	return LLVMBuildICmp(LLVMIntEQ, $0.codegen(parentBlock), LLVMConstNull(LLVMPointerType(LLVMGetTypeByName("class.PyObject"), 0)), "");
}

/* ---------------------------------------------------------------------------*\
Name: Python object call
Template: $E<PyObject>($E<PyObject>, ...)
\* ---------------------------------------------------------------------------*/
/*exprdef<PyObject> $E<PyObject>($E<PyObject>, ...) {
	int numArgs = $1.size;

	LLVMValueRef argsTupleArgs[1];
	argsTupleArgs[0] = LLVMConstInt(LLVMInt64Type(), numArgs, 1);
	LLVMValueRef argsTuple = LLVMBuildCall(PyTuple_New, argsTupleArgs, 1, "");


	LLVMValueRef setItemArgs[3];
	setItemArgs[0] = argsTuple;
	for (int i = 0; i != numArgs; i = i + 1)
	{
		setItemArgs[1] = LLVMConstInt(LLVMInt64Type(), i, 1);
		setItemArgs[2] = $1[i].codegen(parentBlock);
		LLVMBuildCall(PyTuple_SetItem, setItemArgs, 3, "");
	}

	LLVMValueRef callObjectArgs[2];
	callObjectArgs[0] = $0.codegen(parentBlock);
	callObjectArgs[1] = argsTuple;
	return LLVMBuildCall(PyObject_CallObject, callObjectArgs, 2, "");
}*/
exprdef<PyObject> $E<PyObject!>($E<PyObject>, ...) {
	int numArgs = $1.size;
	LLVMValueRef args[numArgs + 2];
	args[0] = $0.codegen(parentBlock);
	for (int i = 0; i != numArgs; i = i + 1)
	{
		args[i + 1] = $1[i].codegen(parentBlock);
	}
	args[numArgs + 1] = LLVMConstNull(LLVMPointerType(LLVMGetTypeByName("class.PyObject"), 0));
	return LLVMBuildCall(PyObject_CallFunctionObjArgs, args, numArgs + 2, "");
}

/* ---------------------------------------------------------------------------*\
Name: Python attribute getter
Template: $E<PyObject>.$I
\* ---------------------------------------------------------------------------*/
exprdef<PyObject> $E<PyObject>.$I {
	long strlen(string str);
	LLVMValueRef glob = LLVMAddGlobal(LLVMArrayType(LLVMInt8Type(), strlen($1.name)), "string");
	LLVMSetLinkage(glob, 8);
	LLVMSetGlobalConstant(glob, 1);
	LLVMSetInitializer(glob, LLVMConstString($1.name, strlen($1.name), 0));

	LLVMValueRef obj = LLVMBuildAlloca(LLVMPointerType(LLVMGetTypeByName("class.PyObject"), 0), "");
	LLVMValueRef args[2];
	args[0] = $0.codegen(parentBlock);
	args[1] = LLVMConstInBoundsGEP2(
		glob,
		LLVMConstInt(LLVMInt64Type(), 0, 0),
		LLVMConstInt(LLVMInt64Type(), 0, 0)
	);
	return LLVMBuildCall(PyObject_GetAttrString, args, 2, "");
}

/* ---------------------------------------------------------------------------*\
Name: Python module import
Template: import $I
\* ---------------------------------------------------------------------------*/
stmtdef import $I {
	long strlen(string str);
	LLVMValueRef glob = LLVMAddGlobal(LLVMArrayType(LLVMInt8Type(), strlen($0.name)), "string");
	LLVMSetLinkage(glob, 8);
	LLVMSetGlobalConstant(glob, 1);
	LLVMSetInitializer(glob, LLVMConstString($0.name, strlen($0.name), 0));

	LLVMValueRef obj = LLVMBuildAlloca(LLVMPointerType(LLVMGetTypeByName("class.PyObject"), 0), "");
	LLVMValueRef args[1];
	args[0] = LLVMConstInBoundsGEP2(
		glob,
		LLVMConstInt(LLVMInt64Type(), 0, 0),
		LLVMConstInt(LLVMInt64Type(), 0, 0)
	);
	LLVMBuildStore(LLVMBuildCall(PyImport_ImportModule, args, 1, ""), obj);
	addToScope(parentBlock, $0, PyObject, obj);
}

/* ---------------------------------------------------------------------------*\
Name: Python module import from
Template: from $I import $E<PyObject>
\* ---------------------------------------------------------------------------*/
stmtdef from $I import [$I, ...] {
	long strlen(string str);
	LLVMValueRef args[5];

	// Create Python list fromList
	int fromListSize = $1.size;
	args[0] = LLVMConstInt(LLVMInt64Type(), fromListSize, 1);
	LLVMValueRef fromList = LLVMBuildCall(PyList_New, args, 1, "");

	// Fill Python list fromList with Python strings of all ids in $1
	args[0] = fromList;
	for (int i = 0; i != fromListSize; i = i + 1)
	{
		LLVMValueRef glob = LLVMAddGlobal(LLVMArrayType(LLVMInt8Type(), strlen($1[i].name)), "string");
		LLVMSetLinkage(glob, 8);
		LLVMSetGlobalConstant(glob, 1);
		LLVMSetInitializer(glob, LLVMConstString($1[i].name, strlen($1[i].name), 0));

		LLVMValueRef pyUnicodeArgs[1];
		pyUnicodeArgs[0] = LLVMConstInBoundsGEP2(
			glob,
			LLVMConstInt(LLVMInt64Type(), 0, 0),
			LLVMConstInt(LLVMInt64Type(), 0, 0)
		);

		args[1] = LLVMConstInt(LLVMInt64Type(), i, 1);
		args[2] = LLVMBuildCall(PyUnicode_FromString, pyUnicodeArgs, 1, "");
		LLVMBuildCall(PyList_SetItem, args, 3, "");
	}

	// Import fromList from module $0.name
	LLVMValueRef glob = LLVMAddGlobal(LLVMArrayType(LLVMInt8Type(), strlen($0.name)), "string");
	LLVMSetLinkage(glob, 8);
	LLVMSetGlobalConstant(glob, 1);
	LLVMSetInitializer(glob, LLVMConstString($0.name, strlen($0.name), 0));

	args[0] = LLVMConstInBoundsGEP2(
		glob,
		LLVMConstInt(LLVMInt64Type(), 0, 0),
		LLVMConstInt(LLVMInt64Type(), 0, 0)
	);
	args[1] = LLVMConstNull(LLVMPointerType(LLVMGetTypeByName("class.PyObject"), 0));
	args[2] = LLVMConstNull(LLVMPointerType(LLVMGetTypeByName("class.PyObject"), 0));
	args[3] = fromList;
	args[4] = LLVMConstNull(LLVMInt32Type());
	LLVMValueRef module = LLVMBuildCall(PyImport_ImportModuleLevel, args, 5, "");

	// Define symbols for each object in fromList
	args[0] = module;
	for (int i = 0; i != fromListSize; i = i + 1)
	{
		IdExprAST fromExpr = $1[i];
		LLVMValueRef glob = LLVMAddGlobal(LLVMArrayType(LLVMInt8Type(), strlen(fromExpr.name)), "string");
		LLVMSetLinkage(glob, 8);
		LLVMSetGlobalConstant(glob, 1);
		LLVMSetInitializer(glob, LLVMConstString(fromExpr.name, strlen(fromExpr.name), 0));

		args[1] = LLVMConstInBoundsGEP2(
			glob,
			LLVMConstInt(LLVMInt64Type(), 0, 0),
			LLVMConstInt(LLVMInt64Type(), 0, 0)
		);
		LLVMValueRef obj = LLVMBuildAlloca(LLVMPointerType(LLVMGetTypeByName("class.PyObject"), 0), "");
		LLVMBuildStore(LLVMBuildCall(PyObject_GetAttrString, args, 2, ""), obj);
		AddToScope(parentBlock, fromExpr, PyObject, obj);
	}
}

/* ---------------------------------------------------------------------------*\
|                                                                              |
|                               PYTHON BUILTINS                                |
|                                                                              |
\* ---------------------------------------------------------------------------*/

Py_Initialize();

__builtins__ = PyEval_GetBuiltins();
dict = PyDict_GetItem(__builtins__, "dict");
dir = PyDict_GetItem(__builtins__, "dir");
False = PyDict_GetItem(__builtins__, "False");
len = PyDict_GetItem(__builtins__, "len");
list = PyDict_GetItem(__builtins__, "list");
None = PyDict_GetItem(__builtins__, "None");
print = PyDict_GetItem(__builtins__, "print");
repr = PyDict_GetItem(__builtins__, "repr");
str = PyDict_GetItem(__builtins__, "str");
True = PyDict_GetItem(__builtins__, "True");